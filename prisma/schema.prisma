generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                 String         @id @default(uuid())
  name               String
  email              String         @unique
  password           String
  createdAt          DateTime       @default(now())

  // Stripe fields
  stripe_customer_id String?        @unique
  stripe_subscription_id String?
  subscription_status String?       @default("free") // "free", "active", "canceled", "past_due"

  // Trial fields
  trial_start_date   DateTime?
  trial_end_date     DateTime?
  has_used_trial     Boolean        @default(false)

  lastLoginAt        DateTime?

  Activity     Activity[]
  ActivityType ActivityType[]
  Company      Company[]
  Contact      Contact[]
  jobsApplied  Job[]
  JobTitle     JobTitle[]
  Location     Location[]
  Profile      Profile[]
  GmailToken   GmailToken[]
}

model Profile {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  resumes Resume[]
}

model Resume {
  id             String          @id @default(uuid())
  profileId      String
  title          String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  FileId         String?         @unique
  ContactInfo    ContactInfo?
  Job            Job[]
  File           File?           @relation(fields: [FileId], references: [id])
  profile        Profile         @relation(fields: [profileId], references: [id])
  ResumeSections ResumeSection[]
}

model File {
  id         String   @id @default(uuid())
  fileName   String
  filePath   String
  fileType   String
  uploadedAt DateTime @default(now())
  Resume     Resume?
}

model ResumeSection {
  id                      String                   @id @default(uuid())
  resumeId                String
  sectionTitle            String
  sectionType             String
  summaryId               String?                  @unique
  educations              Education[]
  licenseOrCertifications LicenseOrCertification[]
  others                  OtherSection[]
  Resume                  Resume                   @relation(fields: [resumeId], references: [id])
  summary                 Summary?                 @relation(fields: [summaryId], references: [id])
  workExperiences         WorkExperience[]
}

model ContactInfo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resumeId  String   @unique
  firstName String
  lastName  String
  headline  String
  email     String
  phone     String
  address   String?
  resume    Resume   @relation(fields: [resumeId], references: [id])
}

model Summary {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  content       String
  ResumeSection ResumeSection?
}

model WorkExperience {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  companyId       String
  jobTitleId      String
  startDate       DateTime
  endDate         DateTime?
  description     String
  locationId      String
  resumeSectionId String?
  currentJob      Boolean        @default(false)
  ResumeSection   ResumeSection? @relation(fields: [resumeSectionId], references: [id])
  location        Location       @relation(fields: [locationId], references: [id])
  jobTitle        JobTitle       @relation(fields: [jobTitleId], references: [id])
  Company         Company        @relation(fields: [companyId], references: [id])
}

model Education {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  institution     String
  degree          String
  fieldOfStudy    String
  startDate       DateTime?
  endDate         DateTime?
  description     String?
  locationId      String
  resumeSectionId String?
  ResumeSection   ResumeSection? @relation(fields: [resumeSectionId], references: [id])
  location        Location       @relation(fields: [locationId], references: [id])
}

model LicenseOrCertification {
  id              String         @id @default(uuid())
  title           String
  organization    String
  issueDate       DateTime?
  expirationDate  DateTime?
  credentialUrl   String?
  resumeSectionId String?
  ResumeSection   ResumeSection? @relation(fields: [resumeSectionId], references: [id])
}

model OtherSection {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  title           String
  content         String
  resumeSectionId String?
  ResumeSection   ResumeSection? @relation(fields: [resumeSectionId], references: [id])
}

model Contact {
  id          String     @id @default(uuid())
  name        String
  email       String
  createdAt   DateTime
  createdBy   String
  interviewId String?
  Interview   Interview? @relation(fields: [interviewId], references: [id])
  user        User       @relation(fields: [createdBy], references: [id])
}

model JobTitle {
  id              String           @id @default(uuid())
  label           String
  value           String           @unique
  createdBy       String
  jobs            Job[]
  user            User             @relation(fields: [createdBy], references: [id])
  workExperiences WorkExperience[]
}

model JobStatus {
  id    String @id @default(uuid())
  label String
  value String @unique
}

model Location {
  id             String           @id @default(uuid())
  label          String
  value          String           @unique
  stateProv      String?
  country        String?
  createdBy      String
  educations     Education[]
  jobsApplied    Job[]
  user           User             @relation(fields: [createdBy], references: [id])
  workExperience WorkExperience[]
}

model Company {
  id              String           @id @default(uuid())
  label           String
  value           String           @unique
  logoUrl         String?
  createdBy       String
  user            User             @relation(fields: [createdBy], references: [id])
  jobsApplied     Job[]
  workExperiences WorkExperience[]
}

model JobSource {
  id          String @id @default(uuid())
  label       String
  value       String @unique
  jobsApplied Job[]
}

model Interview {
  id           String    @id @default(uuid())
  createdAt    DateTime
  jobId        String
  interviewers Contact[]
  job          Job       @relation(fields: [jobId], references: [id])
}

model Job {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String
  description String?
  detailedDescription String?
  jobRequirements String?
  jobResponsibilities String?
  jobBenefits String?
  status      String   @default("applied")
  notes       String?
  jobUrl      String?
  source      String?  @default("manual")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  applied     Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  resumeId String?
  resume   Resume? @relation(fields: [resumeId], references: [id])

  jobTitleId String?
  jobTitle   JobTitle? @relation(fields: [jobTitleId], references: [id])

  locationId  String?
  jobsAppliedLocation Location? @relation(fields: [locationId], references: [id])

  companyId  String?
  jobsAppliedCompany Company? @relation(fields: [companyId], references: [id])

  jobSourceId String?
  jobsAppliedSource JobSource? @relation(fields: [jobSourceId], references: [id])

  interviews Interview[]
  activities Activity[]

  @@index([userId])
}

model ActivityType {
  id          String     @id @default(uuid())
  label       String
  value       String     @unique
  description String?
  createdBy   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Activities  Activity[]
  user        User       @relation(fields: [createdBy], references: [id])
}

model Activity {
  id             String    @id @default(uuid())
  userId         String
  activityName   String
  startTime      DateTime
  endTime        DateTime?
  duration       Int?
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  activityTypeId String

  // Add this field
  jobId String?
  job   Job?    @relation(fields: [jobId], references: [id])

  activityType ActivityType @relation(fields: [activityTypeId], references: [id])
  User         User         @relation(fields: [userId], references: [id])
}

model GmailToken {
  id          String   @id @default(uuid())
  userId      String   @unique
  accessToken String
  refreshToken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}
