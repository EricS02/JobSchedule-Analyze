// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Step: 1 run `npx prisma generate` 
// Step: 2 run `npx prisma migrate dev` after update, make sure code is updated afterwards

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  password    String
  createdAt   DateTime   @default(now())
  jobsApplied Job[]
  JobTitle    JobTitle[]
  Location    Location[]
  Company     Company[]
  Contact     Contact[]
}

model Contact {
  id          String     @id @default(uuid())
  name        String
  email       String
  createdAt   DateTime
  createdBy   String // userId
  user        User       @relation(fields: [createdBy], references: [id])
  Interview   Interview? @relation(fields: [interviewId], references: [id])
  interviewId String?
}

model JobTitle {
  id        String @id @default(uuid())
  label     String
  value     String @unique
  jobs      Job[]
  createdBy String // userId
  user      User   @relation(fields: [createdBy], references: [id])
}

model JobStatus {
  id    String @id @default(uuid())
  label String
  value String @unique
  jobs  Job[]
}

model Location {
  id          String  @id @default(uuid())
  label       String
  value       String
  stateProv   String?
  country     String?
  jobsApplied Job[]
  createdBy   String // userId
  user        User    @relation(fields: [createdBy], references: [id])
}

model Company {
  id          String  @id @default(uuid())
  label       String
  value       String  @unique
  jobsApplied Job[]
  logoUrl     String? // field is optional
  createdBy   String // userId
  user        User    @relation(fields: [createdBy], references: [id])
}

model JobSource {
  id          String @id @default(uuid())
  label       String
  value       String @unique
  jobsApplied Job[]
}

model Interview {
  id           String    @id @default(uuid())
  createdAt    DateTime
  jobId        String
  job          Job?      @relation(fields: [jobId], references: [id])
  interviewers Contact[]
}

model Job {
  id          String      @id @default(uuid())
  userId      String
  User        User        @relation(fields: [userId], references: [id])
  jobUrl      String?
  description String
  jobType     String
  createdAt   DateTime
  applied     Boolean     @default(false)
  appliedDate DateTime?
  dueDate     DateTime?
  statusId    String
  Status      JobStatus   @relation(fields: [statusId], references: [id])
  JobTitle    JobTitle    @relation(fields: [jobTitleId], references: [id])
  jobTitleId  String
  Company     Company     @relation(fields: [companyId], references: [id])
  companyId   String
  JobSource   JobSource?  @relation(fields: [jobSourceId], references: [id])
  jobSourceId String?
  salaryRange String?
  Location    Location?   @relation(fields: [locationId], references: [id])
  locationId  String?
  Interview   Interview[]
}
